const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const crypto = require('crypto');

const app = express();

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Nodemailer configuration
const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    auth: {
        user: "anuragkofficial21@gmail.com",
        pass: "bjlgmcajfhsvpwwz",
    },
});

// Password reset token storage
const passwordResetTokens = {};

// Function to send email
const sendEmail = async (email, token) => {
    const resetLink = `http://localhost:3000/reset-password?token=${token}`;
    const mailOptions = {
        from: 'test@gmail.com',
        to: email,
        subject: 'Password Reset',
        html: `<p>Click the following link to reset your password: <a href="${resetLink}">${resetLink}</a></p>`
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.error('Error sending email:', error);
        throw new Error('Failed to send password reset email');
    }
};

// Request password reset
app.post('/forgot-password', (req, res) => {
    const { email } = req.body;
    // Generate reset token
    const token = crypto.randomBytes(20).toString('hex');
    passwordResetTokens[email] = token;

    // Send email with reset link
    sendEmail(email, token)
        .then(() => { 
            res.status(200).json({ message: 'Password reset link sent successfully' });
        })
        .catch(error => {
            console.error('Error:', error);
            res.status(500).json({ message: 'Failed to send password reset link' });
        });
});

// Reset password page
app.get('/reset-password', (req, res) => {
    const { token } = req.query;
    if (!token || !passwordResetTokens[token]) {
        return res.status(400).json({ message: 'Invalid or expired token' });
    }
    // You can serve a password reset form here
});

// Update password
app.post('/reset-password', (req, res) => {
    const { token, password } = req.body;
    const email = Object.keys(passwordResetTokens).find(key => passwordResetTokens[key] === token);
    if (!email) {
        return res.status(400).json({ message: 'Invalid or expired token' });
    }

    // Update user's password (you need to implement your own logic here)
    // For demonstration purposes, let's just log the email and password
    console.log(`Resetting password for email: ${email} to ${password}`);

    // Remove token from storage
    delete passwordResetTokens[email];

    res.status(200).json({ message: 'Password reset successfully' });
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
